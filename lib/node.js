// Generated by CoffeeScript 1.7.1
(function() {
  var ElectedNode, EventEmitter, Forwarder, PgmNode, async, common, election, zmq,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  zmq = require('zmq');

  async = require('async');

  EventEmitter = require('events').EventEmitter;

  election = require('./election');

  common = require('./common');

  Forwarder = (function() {
    function Forwarder() {
      this.sub = zmq.socket('sub');
      this.pub = zmq.socket('pub');
      this.sub.bindSync("tcp://0.0.0.0:*");
      this.pub.bindSync("tcp://0.0.0.0:*");
      this.sub_addr = common.get_local_endpoint(this.sub);
      this.pub_addr = common.get_local_endpoint(this.pub);
      this.sub.subscribe('');
      this.sub.on('message', (function(_this) {
        return function() {
          var msg;
          msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.pub.send(msg);
        };
      })(this));
    }

    return Forwarder;

  })();

  ElectedNode = (function(_super) {
    __extends(ElectedNode, _super);

    function ElectedNode(options) {
      this.options = options != null ? options : {};
      this.fwd = new Forwarder();
      this.metadata = {
        sub_addr: this.fwd.sub_addr,
        pub_addr: this.fwd.pub_addr
      };
      this.ready = false;
      this.subscriptions = [];
      this.elector = new election.Elector(this.options, this.metadata);
      this.elector.on('ready', (function(_this) {
        return function(elector, addr) {
          return elector.start();
        };
      })(this));
      this.elector.on('error', (function(_this) {
        return function(err) {
          return _this.emit('error', err);
        };
      })(this));
      this.elector.on('elected', (function(_this) {
        return function(elect) {
          if (elect.sub_addr !== _this.metadata.sub_addr || elect.pub_addr !== _this.metadata.pub_addr || !_this.ready) {
            _this.metadata = elect;
            _this.connect_backend();
            if (!_this.ready) {
              _this.ready = true;
              return _this.emit('ready');
            }
          }
        };
      })(this));
    }

    ElectedNode.prototype.connect_backend = function() {
      var s, _i, _len, _ref;
      if (this.pub_sock) {
        this.pub_sock.close();
      }
      if (this.sub_sock) {
        this.sub_sock.close();
      }
      this.pub_sock = zmq.socket('pub');
      this.pub_sock.connect(this.metadata.sub_addr);
      this.sub_sock = zmq.socket('sub');
      this.sub_sock.connect(this.metadata.pub_addr);
      _ref = this.subscriptions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        this.sub_sock.subscribe(s);
      }
      return this.sub_sock.on('message', (function(_this) {
        return function() {
          var msg;
          msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.emit('message', msg);
        };
      })(this));
    };

    ElectedNode.prototype.subscribe = function() {
      var c, chan, _i, _len;
      chan = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = chan.length; _i < _len; _i++) {
        c = chan[_i];
        this.sub_sock.subscribe(c);
        if (this.subscriptions.indexOf(c) < 0) {
          this.subscriptions.push(c);
        }
      }
    };

    ElectedNode.prototype.unsubscribe = function() {
      var c, chan, idx, _i, _len;
      chan = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = chan.length; _i < _len; _i++) {
        c = chan[_i];
        this.sub_sock.unsubscribe(c);
        idx = this.subscriptions.indexOf(c);
        if (idx >= 0) {
          this.subscriptions.splice(idx, 1);
        }
      }
    };

    ElectedNode.prototype.publish = function() {
      var msg;
      msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.pub_sock.send(msg);
    };

    return ElectedNode;

  })(EventEmitter);

  PgmNode = (function(_super) {
    __extends(PgmNode, _super);

    function PgmNode(options) {
      var type, url;
      this.options = options != null ? options : {};
      this.sub_sock = zmq.socket('sub');
      this.pub_sock = zmq.socket('pub');
      if (this.options.type === 'epgm') {
        type = 'epgm';
      } else {
        type = 'pgm';
      }
      url = "" + type + "://" + this.options.pgm_addr + ":" + this.options.pgm_port;
      this.sub_sock.connect(url);
      this.pub_sock.bindSync(url);
      this.sub_sock.subscribe('');
    }

    PgmNode.prototype.subscribe = function() {
      var chan;
      chan = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.sub_sock.subscribe(chan);
    };

    PgmNode.prototype.unsubscribe = function() {
      var chan;
      chan = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.sub_sock.unsubscribe(chan);
    };

    PgmNode.prototype.publish = function() {
      var msg;
      msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.pub_sock.send(msg);
    };

    return PgmNode;

  })(EventEmitter);

  exports.ElectedNode = ElectedNode;

  exports.PgmNode = PgmNode;

}).call(this);
